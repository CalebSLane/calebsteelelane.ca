# version: '3.8'

x-logging: &local-logging
  driver: 'local'
  options:
    max-size: '20m'
    max-file: '50'
x-loki-logging: &loki-logging
  driver: 'loki'
  options:
    max-size: '20m'
    max-file: '50'
    loki-url: '${LOKI_URL}'
    loki-external-labels: 'container_name={{.Name}},hostname=${LOKI_REPORTING_NAME}'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2}[T ]?\d{2}:\d{2}:\d{2}.\d{3}'

x-healthcheck: &healthcheck
  test: /healthcheck.sh
  interval: 60s
  retries: 5
  start_period: 20s
  timeout: 10s

x-security: &security
  security_opt:
    - 'no-new-privileges=true'
  cap_drop:
    - ALL
  read_only: true
  pull_policy: always
  privileged: false
  init: true

x-build-args: &build-args
  PROJECT_NAME: ${PROJECT_NAME}
  ENV: ${ENV}
  ENABLE_GATSBY_REFRESH_ENDPOINT: ${ENABLE_GATSBY_REFRESH_ENDPOINT}
  PUBLIC_STATIC_APP_WEB_ADDRESS: ${PUBLIC_STATIC_APP_WEB_ADDRESS}
  PUBLIC_APP_WEB_ADDRESS: ${PUBLIC_APP_WEB_ADDRESS}
  KC_DB_ARG: ${KC_DB}
  #KC_DB_DRIVER_ARG: ${KC_DB_DRIVER}
  #KC_TRANSACTION_XA_ENABLED_ARG: ${KC_TRANSACTION_XA_ENABLED}
  #KC_FEATURES_ARG: ${KC_FEATURES}
  #KC_FEATURES_DISABLED_ARG: ${KC_FEATURES_DISABLED}
  #KC_HTTP_RELATIVE_PATH_ARG: ${KC_HTTP_RELATIVE_PATH}
  #KC_HTTPS_CLIENT_AUTH_ARG: ${KC_HTTPS_CLIENT_AUTH}
  KC_HEALTH_ENABLED_ARG: ${KC_HEALTH_ENABLED}
  #KC_HTTP_MANAGEMENT_RELATIVE_PATH_ARG: ${KC_HTTP_MANAGEMENT_RELATIVE_PATH
  #KC_HTTPS_MANAGEMENT_CLIENT_AUTH_ARG: ${KC_HTTPS_MANAGEMENT_CLIENT_AUTH}
  KC_METRICS_ENABLED_ARG: ${KC_METRICS_ENABLED}
  #KC_VAULT_ARG: ${KC_VAULT}
  #KC_TRACING_ENABLED_ARG: ${KC_TRACING_ENABLED}
  #KC_TRACING_JDBC_ENABLED_ARG: ${KC_TRACING_JDBC_ENABLED}
  #KC_TRACING_SAMPLER_TYPE_ARG: ${KC_TRACING_SAMPLER_TYPE}
  #KC_EVENT_METRICS_USER_ENABLED_ARG: ${KC_EVENT_METRICS_USER_ENABLED}
  #KC_FIPS_MODE_ARG: ${KC_FIPS_MODE}

services:
  api.web.api:
    <<: *security # secure
    container_name: api
    build:
      context: api
      dockerfile: Dockerfile
      target: ${API_TARGET}
      args: *build-args
    # image: api:latest
    depends_on:
      vault.web.vault:
        condition: service_healthy
      auth.web.auth:
        condition: service_healthy
        restart: true
      proxy:
        condition: service_healthy
    networks:
      - frontend
      - backend
    env_file:
      - '.env'
      - '.env.secret'
    volumes:
      - type: tmpfs
        target: /tmp/tomcat
      # - type: tmpfs # testcoverage
      #   target: /root/.m2 # testcoverage
      # - ./docs/api/:/docs/:rw # testcoverage
      # - ./coverage/api/:/coverage/:rw # testcoverage
      - letsencrypt-data:${CERT_ROOT_PATH}:rw
    logging: *local-logging
    healthcheck: *healthcheck

  app.web.app:
    <<: *security # secure
    container_name: app
    build:
      context: app
      dockerfile: Dockerfile
      target: ${APP_TARGET}
      args: *build-args
    # image: app:latest
    depends_on:
      vault.web.vault:
        condition: service_healthy
      proxy:
        condition: service_healthy
    networks:
      - frontend
    env_file:
      - '.env'
      - '.env.secret'
    volumes:
      # - type: tmpfs # dev
      #   target: /tmp # dev
      #   tmpfs: # dev
      #     size: 10m # dev
      #     mode: 01777 # dev
      # - type: tmpfs # dev
      #   target: /app/node_modules/.cache # dev
      #   tmpfs: # dev
      #     size: 10m # dev
      #     mode: 01777 # dev
      - type: tmpfs
        target: /var/cache/nginx/
        tmpfs:
          size: 100m
          mode: 01777
      - type: tmpfs
        target: /var/run/nginx/
        tmpfs:
          size: 10m
      # - ./app/src/:/app/src:ro # dev
      # - ./app/public/:/app/public:ro # dev
      # - ./coverage/app/:/app/coverage/:rw # testcoverage
    logging: *local-logging
    healthcheck: *healthcheck

  staticapp.web.staticapp:
    # <<: *security # secure
    container_name: staticapp
    build:
      context: staticapp
      dockerfile: Dockerfile
      target: ${STATIC_APP_TARGET}
      args: *build-args
    # image: staticapp:latest
    depends_on:
      vault.web.vault:
        condition: service_healthy
      proxy:
        condition: service_healthy
    networks:
      - frontend
    env_file:
      - '.env'
    volumes:
      - type: tmpfs
        target: /var/cache/nginx/
        tmpfs:
          size: 100m
          mode: 01777
      - type: tmpfs
        target: /var/run/nginx/
        tmpfs:
          size: 10m
      # - ./staticapp/src/:/staticapp/src:ro # dev
      # - ./coverage/staticapp/:/staticapp/coverage/:rw # testcoverage
    logging: *local-logging
    healthcheck: *healthcheck

  auth.web.auth:
    <<: *security # secure
    container_name: auth
    build:
      context: auth
      dockerfile: Dockerfile
      target: ${AUTH_TARGET}
      args: *build-args
    # image: auth:latest
    depends_on:
      vault.web.vault:
        condition: service_healthy
      proxy:
        condition: service_healthy
      authdb:
        condition: service_healthy
        restart: true
    networks:
      - frontend
      - backend
    env_file:
      - '.env'
      - '.env.secret'
    volumes:
      - type: tmpfs
        target: /tmp/vertx-cache
        tmpfs:
          size: 10m
      - type: tmpfs
        target: /tmp/uploads
        tmpfs:
          size: 10m
      - type: tmpfs
        target: /opt/keycloak/data/transaction-logs/ShadowNoFileLockStore/defaultStore/
        tmpfs:
          size: 10m
      - letsencrypt-data:${CERT_ROOT_PATH}:ro
    logging: *local-logging
    healthcheck: *healthcheck

  authdb:
    <<: *security # secure
    container_name: authdb
    build:
      context: authdb
      dockerfile: Dockerfile
      target: ${AUTHDB_TARGET}
      args: *build-args
    # image: authdb:latest
    depends_on:
      vault.web.vault:
        condition: service_healthy
      proxy:
        condition: service_healthy
    networks:
      - backend
    env_file:
      - '.env'
      - '.env.secret'
    volumes:
      - type: tmpfs
        target: /run/postgresql/
        tmpfs:
          size: 10m
      - type: tmpfs
        target: /tmp/
        tmpfs:
          size: 10m
      - authdb-data:/var/lib/postgresql/data:rw
      - letsencrypt-data:${CERT_ROOT_PATH}:ro
    logging: *local-logging
    healthcheck: *healthcheck

  vault.web.vault:
    <<: *security # secure
    container_name: vault
    build:
      context: vault
      dockerfile: Dockerfile
      target: ${VAULT_TARGET}
      args: *build-args
    # image: vault:latest
    networks:
      - frontend
      - backend
    env_file: '.env'
    cap_add:
      - IPC_LOCK
    volumes:
      - type: tmpfs
        target: /tmp/
      - vault-data:/vault/data:rw
      - vault-init-data:/vault/init-data:rw
    logging: *local-logging
    healthcheck: *healthcheck

  proxy:
    <<: *security # secure
    container_name: proxy
    build:
      context: proxy
      dockerfile: Dockerfile
      target: ${PROXY_TARGET}
      args: *build-args
    # image: proxy:latest
    ports:
      - ${NGINX_HTTP_PORT}:8080
      - 8443:8443
    networks:
      frontend:
        aliases:
          - proxy.web.${PUBLIC_SERVER_DOMAIN}
        #  - app.web.${PUBLIC_SERVER_DOMAIN}  #dev
      backend:
        #aliases:
        #  - api.web.${PUBLIC_SERVER_DOMAIN} # dev
        #  - auth.web.${PUBLIC_SERVER_DOMAIN} # dev
        #  - vault.web.${PUBLIC_SERVER_DOMAIN} # dev
    env_file: '.env'
    volumes:
      - type: tmpfs
        target: /var/cache/nginx/
        tmpfs:
          size: 100m
          mode: 01777
      - type: tmpfs
        target: /var/run/nginx/
        tmpfs:
          size: 10m
          mode: 01777
      - proxy-config-data:/etc/nginx/conf.d:rw
      - certbot-data:${CERTBOT_DATA_PATH}:ro
      - letsencrypt-data:${CERT_ROOT_PATH}:ro
    logging: *local-logging
    healthcheck: *healthcheck

  certbot:
    <<: *security # secure
    container_name: certbot
    build:
      context: certbot
      dockerfile: Dockerfile
      target: ${CERTBOT_TARGET}
      args: *build-args
    # image: certbot:latest
    networks:
      - backend
    env_file: '.env'
    volumes:
      - type: tmpfs
        target: /var/lib/letsencrypt/
      - type: tmpfs
        target: /tmp
      - type: tmpfs
        target: /certbot/temp/
      - type: tmpfs
        target: /var/log/letsencrypt
      - certbot-data:${CERTBOT_DATA_PATH}:rw
      - letsencrypt-data:${CERT_ROOT_PATH}:rw
    logging: *local-logging
    healthcheck: *healthcheck

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  authdb-data:
  certbot-data:
  letsencrypt-data:
  vault-data:
  vault-init-data:
  proxy-config-data:
